### general settings
product_version: "0.1"
ansible_user: "{{ lookup('env', 'USER') }}"
ansible_become_method: sudo
ansible_python_interpreter: /usr/bin/python3
ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
product_name: billy

### host information
ui_hostname: "{{ groups['frontends'].0 }}"
syslog_host: "{{ groups['logserver'].0 }}"
billy_db_host: "{{ groups['databaseserver'].0 }}"
api_hostname: "{{  groups['apiserver'].0 }}"

# billy_db_host_ip: "{{ hostvars[billy_db_host]['ansible_host'] }}"

# installation_mode options:
#   new (default) - assumes that no billy is installed on the target devices - fails if it finds an installation
#   uninstall     - runs uninstall-billy.yml
#   upgrade       - installs on top of an existing system preserving any existing data in ldap, database, api
installation_mode: new
install_syslog: true
run_on_github: false
force_install: false

### operating system settings
user_id: 60320
billy_user: "{{ product_name }}"
billy_group: "{{ billy_user }}"
billy_parent_dir: "/usr/local"
billy_home: "{{ billy_parent_dir }}/{{ product_name }}"
billy_conf_dir: "{{ billy_home }}/etc"
billy_conf_file: "{{ billy_conf_dir }}/billy.json"
billy_secrets_dir: "{{ billy_conf_dir }}/secrets"

# setting default proxy (may be overwritten via --extra-vars)
http_proxy: "{{ lookup('env','http_proxy') }}"
https_proxy: "{{ lookup('env','https_proxy') }}"
no_proxy: "{{ lookup('env','no_proxy') }}"
proxy_exceptions: "{{ lookup('env','no_proxy') }}"
proxy_env:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ https_proxy }}"
        HTTP_PROXY: "{{ http_proxy }}"
        HTTPS_PROXY: "{{ https_proxy }}"
        no_proxy: "{{ proxy_exceptions }}"

http_proxy_import_parameter: ""
# proxy in capitals needed for debian and ubuntu <20
# use the following syntax for authenticated proxy access:
# http_proxy=http://USERNAME:PASSWORD@1.2.3.4:8080/

# OS 
debian_testing_version: "13"
debian_testing_release_name: trixie
arch: x86_64

###############################################################
### database
billy_db_port: 5432
billy_db_name: billydb
billy_dbadmin_name: dbadmin
dbadmin_password_file: "{{ billy_secrets_dir }}/dbadmin_pwd"
billy_db_password_file: "{{ billy_secrets_dir }}/billy_db_pwd"

###############################################################
### api
api_service_name: billy-hasura-docker-api
api_container_name: "{{ product_name }}-api"
api_local_listening_ip_address: "127.0.0.1"
api_network_listening_ip_address: "{{ groups['apiserver'].0 }}"
# api_network_listening_ip_address: "{{ hostvars[groups['apiserver'].0].ip_address }}"
# api_server_ip_address: "{{ groups['apiserver'].0 }}"
api_web_port: 9443
api_hasura_jwt_alg: "RS256"
api_hasura_jwt_secret: "fake-jwt-secret-for-github-install"
api_uri: "https://{{ api_network_listening_ip_address }}:{{ api_web_port }}/api/v1/graphql"
server_admin: "root@{{ api_network_listening_ip_address }}"

############################################################
### middleware server 
jwt_private_key_file: "{{ billy_secrets_dir }}/jwt_private_key.pem"
jwt_public_key_file: "{{ billy_secrets_dir }}/jwt_public_key.pem"
ldap_manager_pwd_file: "{{ billy_secrets_dir }}/ldap_manager_pwd"

middleware_hostname: "127.0.0.1"
ldif_changetype: add
middleware_service_name: "{{ product_name }}-middleware"

# middleware web server
middleware_web_listener_port: 8888
middleware_uri: "https://{{ middleware_hostname }}:{{ middleware_web_listener_port }}/"
##### application server data
middleware_internal_port: 8880

###############################################################
ui_admin_password_file: "{{ billy_secrets_dir }}/ui_admin_pwd"
ui_admin_testonly_password: "billy.1"

### dotnet
dotnet_deb_name: "packages-microsoft-prod.deb"
dotnet_version: "6.0"
dotnet_mode: "Release"
# dotnet_mode: "Debug"
debug_level: "1"
lib_dir: "{{ billy_home }}/lib/files"
lib_tmp_dir: "{{ billy_home }}/lib/tmp"

### password generation
randomly_generated_pwd: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"

### logging
syslog_proto: tcp
syslog_port: 514
middleware_server_syslog_id: "{{ product_name }}.middleware-server"
ui_syslog_id: "{{ product_name }}-ui"
ldap_syslog_id: slapd
api_log_level: info
billy_log_dir: "/var/log/{{ product_name }}"
billy_log_lock_dir: "/var/{{ product_name }}/lock"
billy_mw_lockfile: "{{ billy_log_lock_dir }}/FWO.Middleware.Server_log.lock"
billy_ui_lockfile: "{{ billy_log_lock_dir }}/FWO.Ui_log.lock"

### apache: both package and dir name (needed both on ui and api hosts):
webserver_package_name: apache2
http_conf_dir: /etc/{{ webserver_package_name }}/sites-available/
wsgi_package_name: libapache2-mod-wsgi

################# testing #########################
billytest_user: "{{ product_name }}test"
billytest_home: "/home/{{ billytest_user }}"

# initialize upgrade files list to empty, needed when running in test only mode (-t test):
upgrade_files: []

test_packages:
  - postgresql-client
  - curl

test_dir: "{{ billy_home }}/test"
csharp_test_start_dir: "{{ billy_home }}/test/csharp/FWO.Test"

# make sure lib role is only run once per host to save time
# set initially to false
lib_role_has_run: false
