@using BlazorTable
@using billy.Api.Data
@using billy.Api.Client
@using billy.Config.Api
@using billy.DeviceAutoDiscovery
@using billy.Middleware.Client

@page "/settings/managements"
@attribute [Authorize(Roles = "admin, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("managements"))</h3>
@(userConfig.GetText("U5111"))
<hr />

<div class="form-group row">
    <button type="button" class="btn btn-success m-2" @onclick="Add">@(userConfig.GetText("add_new_management"))</button>
    @if (showCleanupButton)
    {
        <AuthorizeView Roles="admin, auditor">
            <Authorized>
                <button type="button" class="btn btn-danger m-2" @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
            </Authorized>
        </AuthorizeView>
    }
</div>

<div class="d-flex flex-column m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="Management" Items="managements" @ref="table" PageSize="0" ColumnReorder="true">
        <Column TableItem="Management" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-success" @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    @* <AuthorizeView Roles="admin, auditor, fw-admin" Context="ctx"> *@
                    <AuthorizeView Roles="admin, auditor, fw-admin" Context="ctx">
                        <Authorized>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                            @if (context.DeviceType.CanBeSupermanager() || context.DeviceType.CanBeAutodiscovered(context))
                            {
                                <button type="button" class="btn btn-sm btn-secondary" @onclick="() => AutoDiscover(context)">@(userConfig.GetText("autodiscover"))</button>
                            }
                        </Authorized>
                    </AuthorizeView>
                </div>
            </Template>
        </Column>
        <Column TableItem="Management" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="@(userConfig.GetText("type"))" Field="@(x => x.DeviceType.Id)" Sortable="true">
            <Template>
                @(context.DeviceType.NameVersion())
            </Template>
        </Column>
        <Column TableItem="Management" Title="@(userConfig.GetText("host"))" Field="@(x => x.Hostname)" Sortable="true">
            <Template>
                @if (!context.DeviceType.IsDummyRouter())
                {
                    @(context.Host())
                }
                else
                {
                    <p>-</p>
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="@(userConfig.GetText("import_credential"))" Field="@(x => x.ImportCredential.Id)" Sortable="true">
            <Template>
                @if (!context.DeviceType.IsDummyRouter())
                {
                    @(context.ImportCredential.Name)
                }
                else
                {
                    <p>-</p>
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="@(userConfig.GetText("config_path"))" Field="@(x => x.ConfigPath)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="@(userConfig.GetText("super_manager"))" Field="@(x => x.SuperManagerId)" Sortable="true">
            <Template>
                @(((context.SuperManagerId != null) ? managements.Find(x => x.Id == context.SuperManagerId)?.Name : ""))
            </Template>
        </Column>

        <Column TableItem="Management" Title="@(userConfig.GetText("importer_host"))" Field="@(x => x.ImporterHostname)" Sortable="true" Filterable="true" />
        <Column TableItem="Management" Title="@(userConfig.GetText("import_enabled"))" Field="@(x => x.ImportDisabled)" Sortable="true">
            <Template>
                @(GlobalConfig.ShowBool(!context.ImportDisabled))
            </Template>
        </Column>
        <Column TableItem="Management" Title="@(userConfig.GetText("debug_level"))" Field="@(x => x.DebugLevel)" Sortable="true" Filterable="true" />
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("edit_management"))" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actManagement.Id</label>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control form-control-sm" @bind="actManagement.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    <div class="col-sm-8">
                        <textarea rows="3" cols="60" name="text" class="form-control form-control-sm" placeholder=@(userConfig.GetText("comment")) @bind="actManagement.Comment"></textarea>   
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("device_type"))*:</label>
                    <div class="col-sm-8">
                        <Dropdown ElementType="DeviceType" ElementToString="@(d => d.NameVersion())" @bind-SelectedElement="actManagement.DeviceType" Elements="deviceTypes.Where(d => d.IsManagement)">
                            <ElementTemplate Context="devType">
                                @devType.NameVersion()
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                </div>
                @if (!actManagement.DeviceType.IsDummyRouter())
                {
                    @if (actManagement.DeviceType.Name == "Azure")
                    {
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("cloud_sub_id")):</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control form-control-sm" @bind="actManagement.CloudSubscriptionId" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("cloud_tenant_id")):</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control form-control-sm" @bind="actManagement.CloudTenantId" />
                            </div>
                        </div>
                        // not really used just hard-coded for displaying in table:
                        actManagement.Hostname = "management.azure.com";
                        actManagement.Port = 443;
                    }
                    else
                    {
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("hostname"))*:</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control form-control-sm" @bind="actManagement.Hostname" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                            <div class="col-sm-2">
                                <input type="text" class="form-control form-control-sm" @bind="actManagement.Port" />
                            </div>
                        </div>
                    }
                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("import_credential"))*:</label>
                        <div class="col-sm-8">
                            <Dropdown ElementType="ImportCredential" ElementToString="@(c => c.Name)" @bind-SelectedElement="actManagement.ImportCredential" Elements="credentials">
                                <ElementTemplate Context="cred">
                                    @cred.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                }
                @if (actManagement.DeviceType.CanHaveDomain())
                {
                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@userConfig.GetText("config_path"):</label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control form-control-sm" @bind="actManagement.ConfigPath" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@userConfig.GetText("domain_uid"):</label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control form-control-sm" @bind="actManagement.DomainUid" />
                        </div>
                    </div>
                }
                @if (actManagement.DeviceType.CanHaveSupermanager())
                {
                    <div class="form-group row">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("super_manager"))*:</label>
                        <div class="col-sm-8">
                            <Dropdown ElementType="Management" ElementToString="@(m => m.Name)" @bind-SelectedElement="selectedSuperManagement" Elements="managements.Where(x => x.DeviceType.Id == actManagement.DeviceType.GetSupermanagerId())">
                                <ElementTemplate Context="superManager">
                                    @superManager.Name
                                </ElementTemplate>
                            </Dropdown>
                        </div>
                    </div>
                }
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("importer_host")):</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control form-control-sm" @bind="actManagement.ImporterHostname" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("debug_level")) (0-9):</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control form-control-sm" @bind="actManagement.DebugLevel" />
                    </div>
                </div>

                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="managementImportDisabled" type="checkbox" @bind="actManagement.ImportDisabled">
                    <label class="form-check-label" for="managementImportDisabled"><small>@(userConfig.GetText("import_disabled"))</small></label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" id="managementHideInUi" type="checkbox" @bind="actManagement.HideInUi">
                    <label class="form-check-label" for="managementHideInUi"><small>@(userConfig.GetText("hide_in_ui"))</small></label>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, fw-admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<ConfirmDelete @bind-Display="DeleteMode" PerformAction="Delete" Title="@userConfig.GetText("delete_management")" DeleteMessage="@deleteMessage"/>
<ConfirmDelete @bind-Display="CleanupMode" PerformAction="RemoveSampleData" Title="@userConfig.GetText("remove_sample_data")" DeleteMessage="@cleanupMessage"/>
<AutoDiscovery @ref="autoDiscovery" Actions="actActions" @bind-Display="AutoDiscoverMode" Closing="async () => {AutoDiscoverMode = false; await Refresh();}"/>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<ActionItem> actActions = new List<ActionItem>();
    private List<Management> managements = new List<Management>();
    private List<Management> sampleManagements = new List<Management>();
    private List<Management> discoveredManagements = new List<Management>();
    private List<DeviceType> deviceTypes = new List<DeviceType>();
    private List<Device> devices = new List<Device>();
    private List<ImportCredential> credentials = new List<ImportCredential>();

    private ITable<Management>? table;

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool CleanupMode = false;
    private bool AddMode = false;
    private bool AutoDiscoverMode = false;
    private bool showCleanupButton = false;
    private bool workInProgress = false;

    private Management newManagement = new Management();
    private Management actManagement = new Management();
    private Management? selectedSuperManagement;

    private AutoDiscovery? autoDiscovery;

    private string deleteMessage = "";
    private string cleanupMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected async Task Refresh()
    {
        try
        {
            JwtReader jwt = new JwtReader(userConfig.User.Jwt);
            jwt.Validate();

            if (jwt.ContainsAllowedRole("admin") || jwt.ContainsAllowedRole("fw-admin"))
                managements = await apiConnection.SendQueryAsync<List<Management>>(billy.Api.Client.Queries.DeviceQueries.getManagementsDetails);
            else
                managements = await apiConnection.SendQueryAsync<List<Management>>(billy.Api.Client.Queries.DeviceQueries.getManagementDetailsWithoutSecrets);

            AnalyseSampleManagements();

            deviceTypes = await apiConnection.SendQueryAsync<List<DeviceType>>(billy.Api.Client.Queries.DeviceQueries.getDeviceTypeDetails);

            if (jwt.ContainsAllowedRole("admin") || jwt.ContainsAllowedRole("fw-admin"))
                credentials = await apiConnection.SendQueryAsync<List<ImportCredential>>(billy.Api.Client.Queries.DeviceQueries.getCredentials);
            else
                credentials = await apiConnection.SendQueryAsync<List<ImportCredential>>(billy.Api.Client.Queries.DeviceQueries.getCredentialsWithoutSecrets);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_managements"), "", true);
        }
    }

    private void AnalyseSampleManagements()
    {
        sampleManagements = new List<Management>();
        foreach (var management in managements)
        {
            if (management.Name.EndsWith("_demo"))
            {
                sampleManagements.Add(management);
            }
        }
        showCleanupButton = (sampleManagements.Count > 0);
    }
    private void Edit(Management management)
    {
        actManagement = new Management(management);
        selectedSuperManagement = actManagement.SuperManagerId != null ? managements.FirstOrDefault(m => m.Id == actManagement.SuperManagerId) : null;
        EditMode = true;
    }

    private void RequestDelete(Management management)
    {
        actManagement = management;
        // Checks if delete possible. Todo: further checks?
        if (actManagement.Devices != null && actManagement.Devices.Length > 0)
        {
            DisplayMessageInUi(null, userConfig.GetText("delete_management"), userConfig.GetText("E5101"), true);
        }
        else
        {
            deleteMessage = userConfig.GetText("U5101") + actManagement.Name + "?";
            DeleteMode = true;
        }
    }

    private async Task Delete()
    {
        try
        {
            DeleteMode = false;
            workInProgress = true;
            StateHasChanged();
            var Variables = new { id = actManagement.Id };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(billy.Api.Client.Queries.DeviceQueries.deleteManagement, Variables)).DeletedId;
            if (delId == actManagement.Id)
            {
                managements.Remove(actManagement);
            }
            workInProgress = false;
        }
        catch (Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("delete_management"), "", true);
        }
        StateHasChanged();
    }

    private void RequestRemoveSampleData()
    {
        // Todo: Checks if delete possible?
        cleanupMessage = userConfig.GetText("U5102");
        CleanupMode = true;
    }

    private async Task RemoveSampleData()
    {
        foreach (var management in sampleManagements)
        {
            actManagement = management;
            await Delete();
        }
        CleanupMode = false;
        showCleanupButton = false;
        StateHasChanged();
    }

    private void Add()
    {
        AddMode = true;
        newManagement = new Management()
        {
            DeviceType = deviceTypes.Count > 0 ? deviceTypes.First() : new DeviceType(), 
            ImportCredential = credentials.Count > 0 ? credentials.First() : new ImportCredential()
        };
        Edit(newManagement);
    }

    private void Clone(Management management)
    {
        AddMode = true;
        newManagement = new Management(management);
        newManagement.Id = 0;
        Edit(newManagement);
    }

    private async Task Save()
    {
        try
        {
            actManagement.SuperManagerId = selectedSuperManagement?.Id;
            if (actManagement.Sanitize())
            {
                DisplayMessageInUi(null, userConfig.GetText("save_management"), userConfig.GetText("U0001"), true);
            }
            if (CheckValues(actManagement, userConfig.GetText("save_management")))
            {
                if (AddMode)
                {
                    // insert new management
                    var Variables = new
                    {
                        name = actManagement.Name,
                        devTypeId = actManagement.DeviceType.Id,
                        hostname = actManagement.Hostname,
                        importCredentialId = actManagement.ImportCredential.Id,
                        port = actManagement.Port,
                        importDisabled = actManagement.ImportDisabled,
                        forceInitialImport = actManagement.ForceInitialImport,
                        hideInUi = actManagement.HideInUi,
                        configPath = actManagement.ConfigPath,
                        domainUid = actManagement.DomainUid,
                        cloudSubscriptionId = actManagement.CloudSubscriptionId,                        
                        cloudTenantId = actManagement.CloudTenantId,                        
                        superManager = actManagement.SuperManagerId,
                        importerHostname = actManagement.ImporterHostname,
                        debugLevel = actManagement.DebugLevel,
                        comment = actManagement.Comment
                    };
                    ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(billy.Api.Client.Queries.DeviceQueries.newManagement, Variables)).ReturnIds;
                    if (returnIds != null)
                    {
                        actManagement.Id = returnIds[0].NewId;
                    }
                    managements.Add(actManagement);
                    AddMode = false;
                    EditMode = false;
                }
                else
                {
                    // Update existing management
                    var Variables = new
                    {
                        id = actManagement.Id,
                        name = actManagement.Name,
                        devTypeId = actManagement.DeviceType.Id,
                        hostname = actManagement.Hostname,
                        importCredentialId = actManagement.ImportCredential.Id,
                        port = actManagement.Port,
                        importDisabled = actManagement.ImportDisabled,
                        forceInitialImport = actManagement.ForceInitialImport,
                        hideInUi = actManagement.HideInUi,
                        configPath = actManagement.ConfigPath,
                        domainUid = actManagement.DomainUid,
                        cloudSubscriptionId = actManagement.CloudSubscriptionId,                        
                        cloudTenantId = actManagement.CloudTenantId,                        
                        superManager = actManagement.SuperManagerId,
                        importerHostname = actManagement.ImporterHostname,
                        debugLevel = actManagement.DebugLevel,
                        comment = actManagement.Comment
                    };
                    int udId = (await apiConnection.SendQueryAsync<ReturnId>(billy.Api.Client.Queries.DeviceQueries.updateManagement, Variables)).UpdatedId;
                    EditMode = (udId == actManagement.Id ? false : true);
                    managements[managements.FindIndex(x => x.Id == actManagement.Id)] = actManagement;
                }
                AnalyseSampleManagements();
            }
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_management"), "", true);
        }
    }

    private bool CheckValues(Management mgm, string checkCause)
    {
        if(mgm.Name == null || mgm.Name == "" || 
                (mgm.DeviceType.Manufacturer != "DummyRouter" && (mgm.Hostname == null || mgm.Hostname == "")))
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5102"), true);
            return false;
        }
        if(mgm.DeviceType.IsLegacyDevType() && mgm.Name.Contains(" "))
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5109"), true);
            return false;
        }
        if (mgm.DeviceType.Manufacturer != "DummyRouter" && (mgm.Port < 1 || mgm.Port > 65535))
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5103"), true);
            return false;
        }
        else if (mgm.DebugLevel != null && (mgm.DebugLevel < 0 || mgm.DebugLevel > 9))
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5104"), true);
            return false;
        }
        if (!mgm.ImportDisabled && managements.FirstOrDefault(existingManagement => existingManagement.Hostname == mgm.Hostname && existingManagement.Port == mgm.Port 
            && existingManagement.ConfigPath == mgm.ConfigPath && (existingManagement.SuperManagerId == null || existingManagement.SuperManagerId == mgm.SuperManagerId)
            && existingManagement.Id != mgm.Id && !existingManagement.ImportDisabled) != null)
        {
            DisplayMessageInUi(null, checkCause, userConfig.GetText("E5105"), true);
            return false;
        }
        return true;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        CleanupMode = false;
        AutoDiscoverMode = false;
    }

    private async Task AutoDiscover(Management superManagement)
    {
        try
        {
            workInProgress = true;
            StateHasChanged();
            AutoDiscoveryBase actAutodiscovery = new AutoDiscoveryBase(superManagement, apiConnection);
            actActions = actAutodiscovery.ConvertToActions(await actAutodiscovery.Run());
            int ChangeCounter = actActions.Count();
            await AddAutoDiscoverLogEntry(0, userConfig.GetText("manual_autodiscovery"), (ChangeCounter > 0 ? ChangeCounter + userConfig.GetText("changes_found") : userConfig.GetText("found_no_changes")), superManagement.Id);
            workInProgress = false;
            AutoDiscoverMode = true;
        }
        catch (Exception exception)
        {
            workInProgress = false;
            DisplayMessageInUi(exception, userConfig.GetText("autodiscovery"), "", true);
            await AddAutoDiscoverLogEntry(1, userConfig.GetText("manual_autodiscovery"), userConfig.GetText("ran_into_exception") + exception.Message, superManagement.Id);
        }
    }

    public async Task AddAutoDiscoverLogEntry(int severity, string cause, string description, int? mgmtId = null)
    {
        try
        {
            var Variables = new
            {
                discoverUser = userConfig.User.DbId,
                severity = severity,
                suspectedCause = cause,
                description = description,
                mgmId = mgmtId
            };
            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(MonitorQueries.addAutodiscoveryLogEntry, Variables)).ReturnIds;
            if (returnIds == null)
            {
                Log.WriteError("Write Log", "Log could not be written to database");
            }
        }
        catch (Exception exc)
        {
            Log.WriteError("Write Log", $"Could not write log: ", exc);
        }
    }
}
