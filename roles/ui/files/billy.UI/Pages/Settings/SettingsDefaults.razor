@using billy.Api.Client
@using billy.Config.Api
@using billy.Config.Api.Data

@page "/settings/defaults"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("standards"))</h3>
@(userConfig.GetText("U5311"))
<hr />

@if (configData != null)
{
    <form class="form-inline">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("default_language"))*:</label>
        <div class="col-sm-2">
            <Dropdown ElementType="Language" ElementToString="@(l => userConfig.GetText(l.Name))" @bind-SelectedElement="selectedLanguage" Elements="globalConfig.uiLanguages">
                <ElementTemplate Context="language">
                    @(userConfig.GetText(language.Name))
                </ElementTemplate>
            </Dropdown>
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("sessionTimeout")):</label>
        <div class="col-sm-2">
            <input type="number" min="1" class="form-control form-control-sm w-100" @bind="configData!.SessionTimeout" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("sessionTimeoutNoticePeriod")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.SessionTimeoutNoticePeriod" />
        </div>
    </form>
    @* <form class="form-inline" onsubmit="return false">
        <label for="maxMessages" class="col-form-label col-sm-4">@(userConfig.GetText("maxMessages"))*:</label>
        <div class="col-sm-2">
            <input id="maxMessages" type="number" class="form-control form-control-sm w-100" @bind="configData!.MaxMessages">
        </div>
    </form> *@
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("messageViewTime"))*:</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MessageViewTime">
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("elementsPerFetch"))*:</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.ElementsPerFetch" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("autoFillRightSidebar")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.AutoFillRightSidebar">
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("maxInitialFetchesRightSidebar")):</label>
        <div class="col-sm-2">
            @if (configData!.AutoFillRightSidebar)
            {
                <input disabled type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MaxInitialFetchesRightSidebar" />
            }
            else
            {
                <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MaxInitialFetchesRightSidebar" />
            }
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("minCollapseAllDevices"))*:</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MinCollapseAllDevices">
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("unusedTolerance"))*:</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.UnusedTolerance" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("creationTolerance"))*:</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.CreationTolerance" />
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("dataRetentionTime")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.DataRetentionTime" />
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("autoDiscoverSleepTime")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.AutoDiscoverSleepTime" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("autoDiscoverStartAt")):</label>
        <div class="col-sm-2">
            <input type="time" step="60" class="form-control form-control-sm w-100" @bind="configData!.AutoDiscoverStartAt" />
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("dailyCheckStartAt")):</label>
        <div class="col-sm-2">
            <input type="time" step="60" class="form-control form-control-sm w-100" @bind="configData!.DailyCheckStartAt" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("maxImportDuration")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MaxImportDuration" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("maxImportInterval")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.MaxImportInterval" />
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("reqAllowManualOwnerAdmin")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.AllowManualOwnerAdmin">
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>
    <p>@(userConfig.GetText("U5303"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private Language selectedLanguage = new Language();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            selectedLanguage = globalConfig.uiLanguages.FirstOrDefault(l => l.Name == configData.DefaultLanguage) ?? new Language();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                configData.DefaultLanguage = selectedLanguage.Name;
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
