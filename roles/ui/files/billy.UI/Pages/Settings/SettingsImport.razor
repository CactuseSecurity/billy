@using billy.Api.Client
@using billy.Config.Api
@using billy.Config.Api.Data

@page "/settings/importer"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("importer_settings"))</h3>
@(userConfig.GetText("U5311"))
<hr />

@if (configData != null)
{
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("importSleepTime")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.ImportSleepTime" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("importCheckCertificates")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.ImportCheckCertificates" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("importSuppressCertificateWarnings")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.ImportSuppressCertificateWarnings" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("fwApiElementsPerFetch")):</label>
        <div class="col-sm-2">
            <input type="number" min="0" class="form-control form-control-sm w-100" @bind="configData!.FwApiElementsPerFetch" />
        </div>
    </form>
    <hr />
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("impChangeNotifyActive")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.ImpChangeNotifyActive" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("impChangeNotifyRecipients")):</label>
        <div class="col-sm-2" data-toggle="tooltip" title="@(userConfig.GetText("U5320"))">
            <input type="text" class="form-control form-control-sm w-1000" @bind="configData!.ImpChangeNotifyRecipients" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("impChangeNotifySubject")):</label>
        <div class="col-sm-2">
            <input type="text" class="form-control form-control-sm w-1000" @bind="configData!.ImpChangeNotifySubject" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("impChangeNotifyBody")):</label>
        <div class="col-sm-2">
            <textarea rows="6" cols="60" name="text" class="form-control form-control-sm" placeholder=@(userConfig.GetText("impChangeNotifyBody")) @bind="configData!.ImpChangeNotifyBody"></textarea>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private Language selectedLanguage = new Language();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            selectedLanguage = globalConfig.uiLanguages.FirstOrDefault(l => l.Name == configData.DefaultLanguage) ?? new Language();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                configData.DefaultLanguage = selectedLanguage.Name;
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
