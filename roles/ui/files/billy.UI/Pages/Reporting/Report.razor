@using billy.Config.Api
@using billy.Report
@using billy.Report.Filter
@using billy.Report.Filter.Exceptions
@using billy.Api.Data
@using System
@using System.Threading
@using System.Text.RegularExpressions
@using billy.Ui.Data
@using billy.Ui.Pages.Reporting.Reports
@using System.Diagnostics

@page "/report/generation"
@attribute [Authorize(Roles = "admin, fw-admin, reporter, reporter-viewall, auditor")]

@inject ApiConnection Connection
@inject UserConfig userConfig

@* ==== LEFT SIDEBAR ==== *@
<Sidebar @ref="deviceSelectionSidebar" Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
    <div class="p-3">
        <h5 class="text-left">@(userConfig.GetText("report_type"))</h5>
        <Dropdown ElementType="ReportType" ElementToString="@(r => userConfig.GetText(r.ToString()))"
            SelectedElement="selectedReportType" SelectedElementChanged="ReportTypeChanged" Elements="CustomSortReportType(Enum.GetValues(typeof(ReportType)).Cast<ReportType>().ToList())">
            <ElementTemplate Context="reportType">
                @userConfig.GetText(reportType.ToString())
            </ElementTemplate>
        </Dropdown>
    </div>
    @if (selectedReportType==ReportType.Recertification)
    {
        <div class="p-3">
            <h5 class="text-left">@(userConfig.GetText("recert_parameter"))</h5>
            <h7 class="text-left">@(userConfig.GetText("due_within")):</h7>
            <input type="number" min="1" max="5000" step="1" class="form-control form-control-sm" @bind="recertLookAheadDays" />
            <h7 class="text-left">@(userConfig.GetText("owner"))</h7>
            <Dropdown ElementType="FwoOwner" ElementToString="@(o => o.Name)" Nullable="true"
                @bind-SelectedElement="selectedOwner" Elements="ownerList">
                <ElementTemplate Context="owner">
                    @owner.Name
                </ElementTemplate>
            </Dropdown>
            <br>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="recertShowAnyMatch"
                    @bind="recertShowAnyMatch"
                    @oninput="@(async () => { 
                            recertShowAnyMatch = !recertShowAnyMatch;
                            if (!recertShowAnyMatch) 
                            {
                                if (filterInput.Length>0)
                                {
                                    filterInput += " and (not src==0.0.0.0 and not dst==0.0.0.0)";
                                }
                                else
                                {
                                    filterInput = "(not src==0.0.0.0 and not dst==0.0.0.0)";
                                }
                            }
                            else 
                            {
                                filterInput =  filterInput.Replace("and (not src==0.0.0.0 and not dst==0.0.0.0)", string.Empty);
                                filterInput =  filterInput.Replace("(not src==0.0.0.0 and not dst==0.0.0.0)", string.Empty);
                            }
                        })" />
                <label class="form-check-label" for="recertShowAnyMatch">@(userConfig.GetText("show_any_match"))</label>
            </div>
        </div>
    }
    else if(selectedReportType==ReportType.UnusedRules)
    {
        <div class="p-3">
            <h5 class="text-left">@(userConfig.GetText("unused_days"))</h5>
            <input type="number" min="1" max="5000" step="1" class="form-control form-control-sm" @bind="unusedDays" />
        </div>
    }
    else
    {
        <div class="p-3">
            <h5 class="text-left">@(userConfig.GetText("report_time"))</h5>
            <div class="input-group">
                <input type="text" class="form-control form-control-sm" value="@displayedTimeSelection" />
                <div class="input-group-append">
                    <button type="button" class="btn btn-sm btn-outline-info" @onclick="SelectTime">@(userConfig.GetText("change"))</button>
                </div>
            </div>
        </div>
    }
    <DeviceSelection @bind-DeviceFilter="deviceFilter" @bind-CollapseAll="collapseDevices" @bind-SelectAll="selectAll"></DeviceSelection>
</Sidebar>

@* ==== Middle div ==== *@
<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
<ReportTabset></ReportTabset>

@* ==== Filter line ==== *@
<form class="m-1 position-relative" @onsubmit="GenerateReport">
    <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
            class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" @bind="filterInput" />
    <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
            class="form-control position-absolute whitespace-div" spellcheck="false">
        <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
    </div>
</form>

<div class="btn-group m-1 sticky-marker-60" style="z-index: 16;">
    @if (processing == false)
    {
        <button type="button" class="btn btn-sm btn-primary" @onclick="GenerateReport">@(userConfig.GetText("generate_report"))</button>
    }
    else
    {
        <button type="button" class="btn btn-sm btn-danger" @onclick="() => CancelGeneration()">@(userConfig.GetText("stop_fetching"))</button>
    }
    <ReportExport ReportToExport="currentReport"></ReportExport>
    <button type="button" class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateControl.NewTemplate(filterInput, deviceFilter, selectedReportType, savedTimeFilter); }">@(userConfig.GetText("save_as_template"))</button>
    @if(currentReport != null && currentReport.ReportType == ReportType.UnusedRules && selectedItemsRuleReportTable.Count > 0 
        && (authenticationStateTask!.Result.User.IsInRole("admin") || authenticationStateTask!.Result.User.IsInRole("requester") || authenticationStateTask!.Result.User.IsInRole("auditor")))
    {
        <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ShowCreateTicketDialog = true;}">@(userConfig.GetText("create_delete_ticket"))</button>
    }
</div>

<hr />

@* ==== Templates ==== *@
    <ReportTemplateComponent OnTemplateLoad="
        template => {
            filterInput = template.Filter;
            if(template.ReportParams.ReportType != null)
                selectedReportType = (ReportType)template.ReportParams.ReportType;
            if(template.ReportParams.DeviceFilter != null && template.ReportParams.DeviceFilter.Managements.Count > 0)
                deviceFilter.SynchronizeDevFilter(template.ReportParams.DeviceFilter);
            if (deviceFilter.isAnyDeviceFilterSet())
                selectAll = false;
            else
                selectAll = true;
            if(template.ReportParams.TimeFilter != null)
                InitTimes(template.ReportParams.TimeFilter);
            DisplayTime();
            StateHasChanged();
        }"
    @ref="reportTemplateControl" />

@* ==== Report main div ==== *@
    <div class="card mr-1 ml-1 mb-1 shadow">
        <div class="card-body">

            @if (currentReport != null)
            {
                @switch (currentReport.ReportType)
                {
                    case ReportType.Rules:
                    case ReportType.ResolvedRules:
                    case ReportType.ResolvedRulesTech:
                    case ReportType.Recertification:
                    case ReportType.UnusedRules:
                    case ReportType.NatRules:
                        <RulesReport Managements="managementsReport" SelectedReportType="selectedReportType" RulesPerPage="rulesPerPage" 
                            @bind-SelectedRules="selectedItemsRuleReportTable" />
                        break;

                    case ReportType.Changes:
                    case ReportType.ResolvedChanges:
                    case ReportType.ResolvedChangesTech:
                        <ChangesReport Managements="managementsReport" SelectedReportType="selectedReportType" RulesPerPage="rulesPerPage"
                            @bind-SelectedRuleChanges="selectedItemsChangeReportTable" />
                        break;

                    case ReportType.Statistics:
                        @if (globalStats != null)
                        {
                            <h5>@(userConfig.GetText("glob_no_obj"))</h5>
                            <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {globalStats}">
                                <Column TableItem="Management" Title="@(userConfig.GetText("network_objects"))" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("service_objects"))" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("user_objects"))" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="@(userConfig.GetText("rules"))" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                            </Table>
                        }
                        @foreach (Management management in managementsReport.Where(mgt => !mgt.Ignore))
                        {
                            <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                                <h6>@(userConfig.GetText("total_no_obj_mgt"))</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {management}" PageSize="0">
                                    <Column TableItem="Management" Title="@(userConfig.GetText("network_objects"))" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("service_objects"))" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("user_objects"))" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="@(userConfig.GetText("rules"))" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>

                                <h6>@(userConfig.GetText("no_rules_gtw"))</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Device" Items="management.Devices" PageSize="0">
                                    <Column TableItem="Device" Title="@(userConfig.GetText("gateway"))" Field="@(Device => Device.Name)" />
                                    <Column TableItem="Device" Title="@(userConfig.GetText("no_of_rules"))" Field="@(Device => Device.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>
                            </Collapse>
                        }
                        break;

                    default:
                        break;
                }
            }
        </div>
    </div>
    @if (currentReport != null)
    {
        if (reportGenerationDuration != 0)
        {
            if (reportGenerationDuration<600)
            {
                <small>@(userConfig.GetText("report_duration")) @reportGenerationDuration.ToString("0.00") @(userConfig.GetText("seconds")).</small>
            }
            else
            {
                <small> @(userConfig.GetText("report_duration")) @((reportGenerationDuration/60.0).ToString("0.00")) @(userConfig.GetText("minutes")).</small>
            }
        }
    }
</div>

@* ==== RIGHT SIDEBAR ==== *@
<RightSidebar @bind-Width="sidebarRightWidth" Tabset="rsbTabset" AnchorNavToRSB="anchorNavToRSB" CurrentReport="currentReport" @bind-SelectedRules="selectedItemsRuleReportTable" ManagementsReport="managementsReport"/>
<AnchorNavToRSB @ref="anchorNavToRSB" TabSet="rsbTabset" />

<PopUp Large="true" Title="@(userConfig.GetText("report_time"))" Show="@ShowSelectTimeDialog">
    <Body>
        <div>
            @if (selectedReportType.IsChangeReport())
            {
                <div class="row">
                    <div class="col-sm-1">
                        <div class="form-control-sm offset-sm-6">
                            <input class="form-check-input" type="radio" checked="@(actTimeFilter.TimeRangeType == TimeRangeType.Shortcut)" name="shortcutRange" id="true" @onchange="() => {actTimeFilter.TimeRangeType = TimeRangeType.Shortcut;}" >
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group row">
                            <label for="rangeshortcut" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("shortcut")):</label>
                            <div class="col-sm-3">
                                <Dropdown @bind-SelectedElement="actTimeFilter.TimeRangeShortcut" ElementToString="@(s => userConfig.GetText(s))" Elements="TimeRangeShortcuts.Ranges" >
                                    <ElementTemplate Context="shortcut">
                                        @(userConfig.GetText(shortcut))
                                    </ElementTemplate>
                                </Dropdown>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">
                        <div class="form-control-sm offset-sm-6">
                            <input class="form-check-input" type="radio" checked="@(actTimeFilter.TimeRangeType == TimeRangeType.Interval)" name="shortcutRange" id="true" @onchange="() => {actTimeFilter.TimeRangeType = TimeRangeType.Interval;}" >
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group row">
                            <label for="lastInterval" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("last")):</label>
                            <div class="col-sm-3">
                                <input id="lastInterval" type="text" class="form-control form-control-sm" @bind="actTimeFilter.Offset" />
                            </div>
                            <div class="col-sm-3">
                                <Dropdown @bind-SelectedElement="actTimeFilter.Interval" ElementToString="@(i => userConfig.GetText(i.ToString()))" Elements="Enum.GetValues(typeof(Interval)).Cast<Interval>().Where(x => (x != Interval.Never))" >
                                    <ElementTemplate Context="interval">
                                        @(userConfig.GetText(interval.ToString()))
                                    </ElementTemplate>
                                </Dropdown>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">
                        <div class="form-control-sm offset-sm-6">
                            <input class="form-check-input " type="radio" checked="@(actTimeFilter.TimeRangeType == TimeRangeType.Fixeddates)" name="shortcutRange" id="false" @onchange="() => {actTimeFilter.TimeRangeType = TimeRangeType.Fixeddates;}" >
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group row">
                            <label for="startTime" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("start_time")):</label>
                            <div class="col-sm-3">
                                <input id="startTimeDate" type="date" class="form-control form-control-sm" @bind="actStartDate" />
                            </div>
                            <div class="col-sm-3">
                                <input id="startTime" type="time" step="60" class="form-control form-control-sm" @bind="actStartTime" />
                            </div>
                            <div class="col-sm-3">
                                <input class="form-check-input" id="openStart" type="checkbox" @bind="actTimeFilter.OpenStart" >
                                <label class="col-form-label col-form-label-sm" for="openStart">@(userConfig.GetText("open"))</label>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="endTime" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("end_time")):</label>
                            <div class="col-sm-3">
                                <input id="endTimeDate" type="date" class="form-control form-control-sm" @bind="actEndDate" />
                            </div>
                            <div class="col-sm-3">
                                <input id="endTime" type="time" step="60" class="form-control form-control-sm" @bind="actEndTime" />
                            </div>
                            <div class="col-sm-3">
                                <input class="form-check-input" id="openEnd" type="checkbox" @bind="actTimeFilter.OpenEnd" >
                                <label class="col-form-label col-form-label-sm" for="openEnd">@(userConfig.GetText("open"))</label>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group row">
                    <div class="col-sm-1">
                        <div class="form-control-sm offset-sm-6">
                            <input class="form-check-input" type="radio" checked="@(actTimeFilter.IsShortcut)" name="shortcut" id="true" @onchange="() => {actTimeFilter.IsShortcut = true;}" >
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group row">
                            <label for="shortcut" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("shortcut")):</label>
                            <div class="col-sm-3">
                                <label class="col-form-label col-form-label-sm">@userConfig.GetText(actTimeFilter.TimeShortcut)</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-1">
                        <div class="form-control-sm offset-sm-6">
                            <input class="form-check-input " type="radio" checked="@(!actTimeFilter.IsShortcut)" name="shortcut" id="false" @onchange="() => {actTimeFilter.IsShortcut = false;}" >
                        </div>
                    </div>
                    <div class="col-sm-11">
                        <div class="form-group row">
                            <label for="reportTime" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("time")):</label>
                            <div class="col-sm-4">
                                <input id="reportTimeDate" type="date" class="form-control form-control-sm" @bind="actDate" />
                            </div>
                            <div class="col-sm-4">
                                <input id="reportTime" type="time" step="60" class="form-control form-control-sm" @bind="actTime" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-sm btn-primary" @onclick="SetTimeSelection">@(userConfig.GetText("ok"))</button>
        <button type="button" class="btn btn-sm btn-secondary" @onclick="() => ShowSelectTimeDialog = false">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>
<ReportCreateTicket @bind-Display="ShowCreateTicketDialog" SelectedRules="selectedItemsRuleReportTable"/>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    public double reportGenerationDuration;
    private bool processing = false;
    private CancellationTokenSource tokenSource = new CancellationTokenSource();

    private List<Rule> selectedItemsRuleReportTable = new List<Rule>();
    private List<RuleChange> selectedItemsChangeReportTable = new List<RuleChange>();

    private Management[] managementsReport = new Management[0];
    private Management? globalStats = null;

    private ReportType selectedReportType = ReportType.Rules;
    private FwoOwner? selectedOwner = null;
    private List<FwoOwner> ownerList = new List<FwoOwner>();

    private DeviceFilter deviceFilter = new DeviceFilter();
    private bool selectAll = true;
    private List<string> unsupportedList = new List<string>();
    private DeviceFilter reducedDeviceFilter = new DeviceFilter();

    private DateTime actDate = DateTime.Now;
    private DateTime actTime = DateTime.Now;
    private DateTime actStartDate = DateTime.Now;
    private DateTime actStartTime = DateTime.Now;
    private DateTime actEndDate = DateTime.Now;
    private DateTime actEndTime = DateTime.Now;
    private TimeFilter actTimeFilter = new TimeFilter();
    private TimeFilter savedTimeFilter = new TimeFilter();
    private string displayedTimeSelection = "";
    private bool ShowSelectTimeDialog = false;
    private bool recertShowAnyMatch = true;
    private int recertLookAheadDays = 0;
    private int unusedDays = 0;
    private bool ShowCreateTicketDialog = false;
    private bool recertSingleLinePerRule = true;

    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    private int sidebarLeftWidth = GlobalConfig.kSidebarLeftWidth;
    private int sidebarRightWidth = GlobalConfig.kSidebarRightWidth;

    private ReportTemplateComponent reportTemplateControl = new ReportTemplateComponent();
    private ReportTemplate reportParams = new ReportTemplate();

    private ReportBase? currentReport;

    private billy.Ui.Shared.TabSet rsbTabset;
    private Sidebar? deviceSelectionSidebar;
    private billy.Ui.Shared.AnchorNavToRSB anchorNavToRSB;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";

    private bool collapseDevices = false;

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                displayedTimeSelection = userConfig.GetText("now");
                unusedDays = userConfig.UnusedTolerance;

                deviceFilter.Managements = await Connection.SendQueryAsync<List<ManagementSelect>>(DeviceQueries.getDevicesByManagements);
                ownerList = await Connection.SendQueryAsync<List<FwoOwner>>(billy.Api.Client.Queries.OwnerQueries.getOwners);

                await InvokeAsync(StateHasChanged);
                if (deviceFilter.NumberMgmtDev() > userConfig.MinCollapseAllDevices)
                {
                    collapseDevices = true;
                    await InvokeAsync(StateHasChanged);
                }

                await InvokeAsync(StateHasChanged);
                recertLookAheadDays = Convert.ToInt32(userConfig.RecertificationDisplayPeriod);
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("object_fetch"), "", true);
            }
        });
    }

    private void ReportTypeChanged(ReportType newReportType)
    {
        // clear report data when switching reportType
        // as we would be missing src/dst/svc information in some cases           
        managementsReport = new Management[] {};
        globalStats = null;
        selectedReportType = newReportType;
        if (selectedReportType == ReportType.Recertification)
        {
            //filterInput = "remove=false and recertdisplay=0";
        }
        DisplayTime();
        StateHasChanged();
        reportGenerationDuration = 0;
    }

    private void InitTimes(TimeFilter timeFilter)
    {
        actTimeFilter = timeFilter;
        actDate = actTime = timeFilter.ReportTime;
        actStartDate = actStartTime = timeFilter.StartTime;
        actEndDate = actEndTime = timeFilter.EndTime;
    }

    private void SelectTime()
    {
        ShowSelectTimeDialog = true;
    }

    private void SetTimeSelection()
    {
        if (selectedReportType.IsChangeReport())
        {
            switch(actTimeFilter.TimeRangeType)
            {
                case TimeRangeType.Shortcut:
                    savedTimeFilter.TimeRangeShortcut = actTimeFilter.TimeRangeShortcut;
                    break;
                case TimeRangeType.Interval:
                    savedTimeFilter.Offset = actTimeFilter.Offset;
                    savedTimeFilter.Interval = actTimeFilter.Interval;
                    break;
                case TimeRangeType.Fixeddates:
                    actTimeFilter.StartTime = actStartDate.Date.Add(actStartTime.TimeOfDay);
                    actTimeFilter.EndTime = actEndDate.Date.Add(actEndTime.TimeOfDay);
                    if(checkTimeRange())
                    {
                        savedTimeFilter.StartTime = actTimeFilter.StartTime;
                        savedTimeFilter.EndTime = actTimeFilter.EndTime;
                        savedTimeFilter.OpenStart = actTimeFilter.OpenStart;
                        savedTimeFilter.OpenEnd = actTimeFilter.OpenEnd;
                    }
                    else return;
                    break;
                default:
                    throw new NotSupportedException($"Found unexpected TimeRangeType");
            }
            savedTimeFilter.TimeRangeType = actTimeFilter.TimeRangeType;
        }
        else
        {
            if (actTimeFilter.IsShortcut)
            {
                savedTimeFilter.TimeShortcut = actTimeFilter.TimeShortcut;
            }
            else
            {
                actTimeFilter.ReportTime = actDate.Date.Add(actTime.TimeOfDay);
                savedTimeFilter.ReportTime = actTimeFilter.ReportTime;
            }
            savedTimeFilter.IsShortcut = actTimeFilter.IsShortcut;
        }
        DisplayTime();
        ShowSelectTimeDialog = false;
    }

    @* private void SyncFilterToDisplay()
    {
        filterInput = Regex.Replace(filterInput, "recertdisplay=" + @"-?\d+", $"recertdisplay={(userConfig.RecertificationPeriod-userConfig.RecertificationDisplayPeriod).ToString()}");
    } *@

    private bool checkTimeRange()
    {
        if(actTimeFilter.TimeRangeType == TimeRangeType.Fixeddates && actTimeFilter.StartTime > actTimeFilter.EndTime)
        {
            DisplayMessageInUi(null, userConfig.GetText("check_times"), userConfig.GetText("E1011"), true);
            return false;
        }
        return true;
    }

    private void DisplayTime()
    {
        if (selectedReportType.IsChangeReport())
        {
            switch (actTimeFilter.TimeRangeType)
            {
                case TimeRangeType.Shortcut:
                    displayedTimeSelection = userConfig.GetText(actTimeFilter.TimeRangeShortcut);
                    break;
                case TimeRangeType.Interval:
                    displayedTimeSelection = userConfig.GetText("last") + " " + 
                        actTimeFilter.Offset + " " + userConfig.GetText(actTimeFilter.Interval.ToString());
                    break;
                case TimeRangeType.Fixeddates:
                    if(actTimeFilter.OpenStart && actTimeFilter.OpenEnd)
                    {
                        displayedTimeSelection = userConfig.GetText("open");
                    }
                    else if(actTimeFilter.OpenStart)
                    {
                        displayedTimeSelection = userConfig.GetText("until") + " " + actTimeFilter.EndTime.ToString();
                    }
                    else if(actTimeFilter.OpenEnd)
                    {
                        displayedTimeSelection = userConfig.GetText("from") + " " + actTimeFilter.StartTime.ToString();
                    }
                    else
                    {
                        displayedTimeSelection = actTimeFilter.StartTime.ToString() + " - " + actTimeFilter.EndTime.ToString();
                    }
                    break;
                default:
                    displayedTimeSelection = "";
                    break;
            };
        }
        else
        {
            if (actTimeFilter.IsShortcut)
            {
                displayedTimeSelection = userConfig.GetText(actTimeFilter.TimeShortcut);
            }
            else
            {
                displayedTimeSelection = actTimeFilter.ReportTime.ToString();
            }
        }
    }

    private async Task GenerateReport()
    {
        Stopwatch watch = new System.Diagnostics.Stopwatch();
        watch.Start();
        tokenSource = new CancellationTokenSource();
        var token = tokenSource.Token;

        // clear selected rules
        selectedItemsRuleReportTable.Clear();
        selectedItemsChangeReportTable.Clear();

        // save original report for exception case
        Management[] managementsReportOrig = managementsReport;
        try
        {
            if (!deviceFilter.isAnyDeviceFilterSet())  // display warning
            {
                DisplayMessageInUi(null, userConfig.GetText("no_device_selected"), userConfig.GetText("E1001"), true);
                return;
            }
            processing = true;

            await PrepareReportGeneration();

            // save selected managements before resetting
            List<int> relevantManagements = deviceFilter.getSelectedManagements();

            DateTime startTime = DateTime.Now;
            managementsReport = new Management[0]; // reset management data when switching between reports

            try
            {
                if(currentReport!.ReportType == ReportType.Statistics)
                {
                    globalStats = new Management();
                    await currentReport.Generate(0, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            setRelevantManagements(relevantManagements);
                            return InvokeAsync(() =>
                            {
                                foreach (Management mgm in managementsReport.Where(mgt => !mgt.Ignore))
                                {
                                    globalStats.RuleStatistics.ObjectAggregate.ObjectCount += mgm.RuleStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.NetworkObjectStatistics.ObjectAggregate.ObjectCount += mgm.NetworkObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.ServiceObjectStatistics.ObjectAggregate.ObjectCount += mgm.ServiceObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.UserObjectStatistics.ObjectAggregate.ObjectCount += mgm.UserObjectStatistics.ObjectAggregate.ObjectCount;
                                }
                                StateHasChanged();
                            });
                        }, token);
                }
                else
                {
                    await currentReport.Generate(userConfig.ElementsPerFetch, Connection,
                    managementsReportIntermediate =>
                    {
                        managementsReport = managementsReportIntermediate;
                        setRelevantManagements(relevantManagements);
                        return InvokeAsync(StateHasChanged);
                    }, token);
                    if (currentReport.ReportType == ReportType.Recertification)
                    {
                        PrepareMetadata(managementsReport);
                    }
                }
            }
            catch (OperationCanceledException e)
            {
                Log.WriteDebug("Generate Report", $"Cancelled: {e.Message}");
            }

            processing = false;
            if(NoRuleFound())
            {
                if(currentReport is ReportRules || currentReport is ReportNatRules)
                {
                    DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4002"), true);
                }
                else if (selectedReportType.IsChangeReport())
                {
                    DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4003"), true);
                }
            }

            Log.WriteDebug("Report Generation", $"Generation Time: {DateTime.Now - startTime}.");
            rsbTabset?.SetActiveTab(1);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            processing = false;
            managementsReport = managementsReportOrig;
            reportTemplateControl.Uncollapse();
            await InvokeAsync(StateHasChanged);
            DisplayMessageInUi(exception, userConfig.GetText("generate_report"), "", true);
        }
        watch.Stop();
        reportGenerationDuration = watch.ElapsedMilliseconds/1000.0;
    }

    private async Task PrepareReportGeneration()
    {
        // collapse report templates
        reportTemplateControl.Collapse();

        // check for unsupported devices
        if(selectedReportType == ReportType.UnusedRules)
        {
            await GetUnsupportedDevices();
            if(unsupportedList.Count > 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("generate_report"), userConfig.GetText("E4004") + string.Join(", ", unsupportedList), true);
            }
        }

        // set filters
        List<int> ownerList = new List<int>();
        if (selectedOwner != null)
        {
            ownerList.Add(selectedOwner.Id);
        }
        RecertFilter recertFilter = new RecertFilter()
        {
            RecertOwnerList = ownerList,
            RecertShowAnyMatch = recertShowAnyMatch,
            RecertificationDisplayPeriod = recertLookAheadDays
        };
        UnusedFilter unusedFilter = new UnusedFilter() { UnusedForDays = unusedDays, CreationTolerance = userConfig.CreationTolerance };
        reportParams = new ReportTemplate(filterInput, selectedReportType == ReportType.UnusedRules ? reducedDeviceFilter : deviceFilter, (int) selectedReportType, savedTimeFilter, recertFilter, unusedFilter);
        currentReport = ReportBase.ConstructReport(reportParams, userConfig);
    }

    private async Task GetUnsupportedDevices()
    {
        unsupportedList.Clear();
        reducedDeviceFilter = new DeviceFilter(deviceFilter);
        foreach (ManagementSelect management in reducedDeviceFilter.Managements)
        {
            foreach (DeviceSelect device in management.Devices)
            {
                if (device.Selected && !(await UsageDataAvailable(device.Id)))
                {
                    unsupportedList.Add(device.Name ?? "?");
                    device.Selected = false;
                }
            }
            if(!DeviceFilter.IsSelectedManagement(management))
            {
                management.Selected = false;
            }
        }
    }
    
    private async Task<bool> UsageDataAvailable(int devId)
    {
        try
        {
            return (await Connection.SendQueryAsync<AggregateCount>(billy.Api.Client.Queries.ReportQueries.getUsageDataCount, new {devId = devId})).Aggregate.Count > 0;
        }
        catch(Exception)
        {
            return false;
        }
    }

    private bool PrepareMetadata(Management[] Managements)
    {
        bool rulesFound = false;
        foreach (Management management in Managements)
            foreach (Device device in management.Devices)
                if (device.ContainsRules())
                {
                    rulesFound = true;
                    foreach (Rule rule in device.Rules!)
                    {
                        rule.Metadata.UpdateRecertPeriods(userConfig.RecertificationPeriod, userConfig.RecertificationNoticePeriod);
                    }
                }
        return rulesFound;
    }

    private void CancelGeneration()
    {
        tokenSource.Cancel();
        DisplayMessageInUi(null, userConfig.GetText("report_data_fetch"), userConfig.GetText("E1003"), true);
    }

    private void setRelevantManagements(List<int> relevantManagements)
    {
        foreach (Management mgm in managementsReport)
        {
            mgm.Ignore = !relevantManagements.Contains(mgm.Id);
        }
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        string input = (changeArgs.Value ?? "").ToString() ?? "";
        List<int> ownerList = new List<int>();
        if (selectedOwner != null)
        {
            ownerList.Add(selectedOwner.Id);
        }

        try
        {
            RecertFilter recertFilter = new RecertFilter()
            {
                RecertOwnerList = ownerList,
                RecertShowAnyMatch = recertShowAnyMatch, 
                RecertSingleLinePerRule = recertSingleLinePerRule
            };
            UnusedFilter unusedFilter = new UnusedFilter() { UnusedForDays = unusedDays, CreationTolerance = userConfig.CreationTolerance };
            reportParams = new ReportTemplate(input, deviceFilter, (int) selectedReportType, savedTimeFilter, recertFilter, unusedFilter);

            DynGraphqlQuery query = Compiler.Compile(reportParams);

            filterFeedbackStart = input;
            filterFeedbackError = "";
            filterFeedbackEnd = "";
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            filterFeedbackStart = input[..errorStart];
            filterFeedbackError = input[errorStart..errorEnd];
            filterFeedbackEnd = input[errorEnd..];
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            DisplayMessageInUi(unexpectedError, userConfig.GetText("filter"), "", false);
#endif
        }
    }

    private bool NoRuleFound()
    {
        if(currentReport != null)
        {
            foreach(var mgmt in currentReport.Managements)
            {
                foreach(var dev in mgmt.Devices)
                {
                    if(dev.Rules != null && dev.Rules.Count() > 0)
                    {
                        return false;
                    }
                    if(dev.RuleChanges != null && dev.RuleChanges.Count() > 0)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private List<ReportType> CustomSortReportType(List<ReportType> ListIn)
    {
        List<ReportType> ListOut = new List<ReportType>();
        List<ReportType> orderedReportTypeList = new List<ReportType>()
        {
            ReportType.Rules, ReportType.ResolvedRules, ReportType.ResolvedRulesTech, ReportType.UnusedRules, ReportType.NatRules,
            ReportType.Recertification,
            ReportType.Changes, ReportType.ResolvedChanges, ReportType.ResolvedChangesTech, 
            ReportType.Statistics
        };
        foreach (ReportType reportType in orderedReportTypeList)
        {
            ReportType? foundType = ListIn.Find(x => x == reportType);
            if (foundType != null)
            {
                ListOut.Add(reportType);
                ListIn.Remove(reportType);
            }
        }
        // finally add remaining report types
        ListOut.AddRange(ListIn);
        return ListOut;
    }
}
