@using billy.Api.Client
@using billy.Config.Api

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("delete"))" Show="@Display" OnClose="async () => await Close()">
    <Body>
        @if (Display)
        {
            <p>@(userConfig.GetText("U8001")) @(ObjectName)?</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, requester, approver, planner, implementer, fw-admin">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="async () => { await Delete(); await Close();}">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button type="button" class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public Func<Task> Delete { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<Task> ResetParent { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public string ObjectName { get; set; } = "";


    private async Task Close()
    {
        Display = false;
        await ResetParent();
    }
}
