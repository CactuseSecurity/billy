@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@page "/monitoring/autodiscovery_logs"

<h3>@(userConfig.GetText("autodiscovery_logs"))</h3>
@(userConfig.GetText("U7401"))
<hr />

<Table TableClass="table table-bordered table-sm table-responsive vheight75 overflow-auto sticky-header" TableItem="LogEntry" Items="logEntrys" PageSize="100">
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true"/>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)" Sortable="true" Filterable="true"/>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("found_by"))" Field="@(x => x.UserId)" Sortable="true">
        <Template>
            @(uiUsers.FirstOrDefault(x => x.DbId == context.UserId)?.Name)
        </Template>
    </Column>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("title"))" Field="@(x => x.SuspectedCause)" Sortable="true" Filterable="true"/>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.ManagementId)" Sortable="true" Filterable="true"/>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("management"))" Field="@(x => x.ManagementId)" Sortable="true">
        <Template>
            @(managements.FirstOrDefault(x => x.Id == context.ManagementId)?.Name)
        </Template>
    </Column>
    <Column TableItem="LogEntry" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" Sortable="true" Filterable="true"/>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    private List<LogEntry> logEntrys = new List<LogEntry>();
    private List<UiUser> uiUsers = new List<UiUser>();
    private List<Management> managements = new List<Management>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            logEntrys = await apiConnection.SendQueryAsync<List<LogEntry>>(MonitorQueries.getAutodiscoveryLogEntrys);
            uiUsers = await apiConnection.SendQueryAsync<List<UiUser>>(FWO.Api.Client.Queries.AuthQueries.getUsers);
            managements = await apiConnection.SendQueryAsync<List<Management>>(FWO.Api.Client.Queries.DeviceQueries.getManagementsDetails);

        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_log_entrys"), "", true);
        }
    }
}
