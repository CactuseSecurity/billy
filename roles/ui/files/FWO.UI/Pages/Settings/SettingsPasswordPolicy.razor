@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data

@page "/settings/passwordpolicy"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("password_policy"))</h3>
@(userConfig.GetText("U5312"))
<hr />

@if (configData != null)
{
    <form class="form-inline" onsubmit="return false">
        <label for="minLength" class="col-form-label col-sm-4">@(userConfig.GetText("pwMinLength")):</label>
        <div class="col-sm-1">
            <input id="minLength" type="text" class="form-control form-control-sm" @bind="configData!.PwMinLength" />
        </div>
    </form>
    <form class="form-inline">
        <label for="upperCaseRequired" class="col-form-label col-sm-4">@(userConfig.GetText("pwUpperCaseRequired")):</label>
        <div class="col-sm-2">
            <input id="upperCaseRequired" type="checkbox" class="w-100" @bind="configData!.PwUpperCaseRequired" />
        </div>
    </form>
    <form class="form-inline">
        <label for="lowerCaseRequired" class="col-form-label col-sm-4">@(userConfig.GetText("pwLowerCaseRequired")):</label>
        <div class="col-sm-2">
            <input id="lowerCaseRequired" type="checkbox" class="w-100" @bind="configData!.PwLowerCaseRequired" />
        </div>
    </form>
    <form class="form-inline">
        <label for="numberRequired" class="col-form-label col-sm-4">@(userConfig.GetText("pwNumberRequired")):</label>
        <div class="col-sm-2">
            <input id="numberRequired" type="checkbox" class="w-100" @bind="configData!.PwNumberRequired" />
        </div>
    </form>
    <form class="form-inline">
        <label for="specialCharactersRequired" class="col-form-label col-sm-4">@(userConfig.GetText("pwSpecialCharactersRequired")):</label>
        <div class="col-sm-2">
            <input id="specialCharactersRequired" type="checkbox" class="w-100" @bind="configData!.PwSpecialCharactersRequired" />
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    ConfigData? configData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("read_config"), "", true);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi!(null, userConfig.GetText("change_policy"), userConfig.GetText("U5302"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("change_policy"), "", true);
        }
    }
}
