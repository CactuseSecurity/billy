# change version to new number in /etc/billy/billy.yaml

- name: check for existing main config file
  stat:
    path: "{{ billy_conf_file }}"
  register: already_installed

- set_fact:
    already_installed: "{{ already_installed.stat.exists }}"

- debug:
    msg: "installation_mode={{ installation_mode }}, already_installed={{ already_installed }}"

- name: fail if unknown installation_mode is set
  fail:
    msg: "Found undefined installation_mode: {{ installation_mode }}, aborting."
  when: installation_mode != "new" and installation_mode != "uninstall" and installation_mode != "upgrade"

- name: fail if not already installed and installation_mode is upgrade
  fail:
    msg: "Could not find existing installation but running with installation_mode set to {{ installation_mode }}. Try running with installation_mode=new"
  when: not already_installed and installation_mode == "upgrade"

- name: edit central conf file - set new version
  lineinfile:
    path: "{{ billy_conf_file }}"
    create: true
    regexp: "product_version"
    line: "    \"product_version\": \"{{ product_version }}\""
  when: installation_mode == "upgrade"
  become: true

- name: include upgrade script
  import_tasks: run-upgrades.yml
  when: "installation_mode == 'upgrade'"

# Do general cleanup

- name: delete ldif files
  file:
    path: "{{  middleware_ldif_dir }}"
    state: absent
  become: true
  when: "'middlewareserver' in group_names"

- name: restart UI to display new product version
  ansible.builtin.systemd:
    name: "{{ product_name }}-ui"
    state: restarted
  become: true
  when: "'frontends' in group_names"
