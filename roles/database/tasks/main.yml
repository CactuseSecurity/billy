- block:

    - name: remove database dir
      file:
        state: absent
        path: "{{ billy_home }}/database"

    - name: install package postgresql packages for debian n ubuntu
      package:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql
        - python3-psycopg2
        - libpq-dev
      when: ansible_os_family == "Debian"

    - name: find out installed postgres version
      script: get_pg_version.sh
      register: pg_version_result
      changed_when: false

    - name: set fact pg_version
      set_fact: pg_version={{ pg_version_result.stdout | float }}

    - name: activate as_single_query if ansible_version is sufficient
      set_fact:
        postgresql_query_as_single_query: true
      when: ansible_version.full is version('2.10', '>=')

    - name: pg_version to int when possible
      set_fact: pg_version={{ pg_version | int }}
      when: pg_version|int >= 10

    - name: set postgresql config path for Debian based systems
      set_fact:
        postgresql_config_file: /etc/postgresql/{{ pg_version }}/main/postgresql.conf
        postgresql_hba_file: /etc/postgresql/{{ pg_version }}/main/pg_hba.conf
      when: ansible_os_family == 'Debian'

    - name: edit postgresql.conf log_destination
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_destination = 'syslog'
        regexp: '\s*log_destination'
        backup: true

    - name: edit postgresql.conf client_min_messages
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: client_min_messages = WARNING
        regexp: '\s*client_min_messages'
        backup: true
          
    - name: edit postgresql.conf log_min_messages
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_min_messages = WARNING
        regexp: '\s*log_min_messages'
        backup: true
          
    - name: edit postgresql.conf application_name
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: application_name = {{ product_name }}-database
        regexp: '\s*application_name'
        backup: true

    - name: edit postgresql.conf log_error_verbosity
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_error_verbosity = DEFAULT
        regexp: '\s*log_error_verbosity'
        backup: true

    - name: edit postgresql.conf log_min_error_statement
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_min_error_statement = ERROR
        regexp: '\s*log_min_error_statement'
        backup: true

    - name: edit postgresql.conf log_line_prefix
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: log_line_prefix = '%d '
        regexp: '\s*log_line_prefix'
        backup: true

    - name: edit postgresql.conf listening IPs
      lineinfile:
        path: "{{ postgresql_config_file }}"
        line: "listen_addresses = '0.0.0.0'"
        regexp: listen_addresses
        backup: true

    - name: edit pg_hba.conf
      blockinfile:
        path: "{{ postgresql_hba_file }}"
        backup: true
        insertbefore: '# IPv4 local connections:'
        block: |
          host  all         dbadmin             0.0.0.0/0            md5
          host  all         {{ billy_user }}   127.0.0.0/8                   trust
          host  all         +dbbackupusers      127.0.0.0/8                   trust
          host  all         confexporter        127.0.0.0/8                   trust
  
    - name: reload postgres service
      service:
        name: "{{ postgresql_package }}"
        state: restarted

    - name: copy database files to backend target
      copy: src="{{ item }}" dest="{{ database_install_dir }}" owner="{{ billy_user }}" group="{{ billy_user }}"
      loop:
        - csv
        - sql        
      tags: [ 'test' ]

    - name: create tablespace directory 
      file:
        path:  "{{ table_space }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0755"
      when: table_space is defined

  become: true

- name: check if database already exists
  postgresql_query:
    query: SELECT count(*) FROM pg_database WHERE datname='{{ billy_db_name }}'
    db: postgres
  register: db_exists
  become: true
  become_user: postgres

- name: create new database
  import_tasks: install-database.yml
  when: installation_mode == "new"

- name: upgrade database
  import_tasks: upgrade-database.yml
  when: installation_mode == "upgrade"

- name: (re)define functions and views
  include_tasks: recreate-functions-and-views-ansible-pre2.10.yml
  when: ansible_version.full is version('2.10', '<')

- name: (re)define functions and views
  include_tasks: recreate-functions-and-views-ansible-2.10.yml
  when: ansible_version.full is version('2.10', '>=')

- name: install pg test packages
  package:
      name: "{{ item }}"
  loop:
    - "{{ postgresql_test_package }}"
  tags: [ 'never', 'unittest' ]
  become: true

- name: run unit tests
  include_tasks: run-unit-tests.yml
  when: not installation_mode == "uninstall" 
  tags: [ 'never', 'unittest' ]

- name: remove database dir
  file:
    state: absent
    path: "{{ billy_home }}/database"
  when: installation_mode == "upgrade"
  become: true
