# this playbook sets up the api

- name: initialize handler for datarecovery
  set_fact:
    api_handler_guard: start
  changed_when: true
  notify:
  - api handler
  when: installation_mode == "upgrade"

- name: check for api dir
  stat:
    path: "{{ billy_home }}/api"
  register: api_dir_check

- name: backup api dir
  synchronize:
    src: "{{ billy_home }}/api"
    dest: "{{ billy_home }}/backup_api"
  delegate_to: "{{ inventory_hostname }}"
  when: api_dir_check.stat.exists and installation_mode == "upgrade"
  become: true

- name: remove api home
  file:
    path: "{{ api_home }}"
    state: absent
  become: true

- name: create api home
  file:
    path: "{{ api_home }}"
    state: directory
    mode: "0755"
    owner: "{{ billy_user }}"
    group: "{{ billy_group }}"
  become: true

- name: create api bin
  file:
    path: "{{ api_home }}/bin"
    state: directory
    mode: "0755"
    owner: "{{ billy_user }}"
    group: "{{ billy_group }}"
  become: true

- name: install apache2
  import_tasks: api-apache-install-and-setup.yml

- name: hasura install 
  import_tasks: hasura-install.yml

- name: include upgrade script
  import_tasks: run-upgrades.yml
  when: "installation_mode == 'upgrade'"

- name: api create documentation
  import_tasks: api-create-docu.yml
  when: api_docu | bool

- name: finalize handler for datarecovery
  set_fact:
    api_handler_guard: stop
  changed_when: true
  notify: "api handler"
  when: installation_mode == "upgrade"
  become: true

- name: set grants for hasura schemas (after hasura install)
  postgresql_query:
    db: "{{ billy_db_name }}"
    query: "GRANT USAGE ON SCHEMA {{ item }} TO dbbackupusers; Grant select on ALL TABLES in SCHEMA {{ item }} to group dbbackupusers; ALTER DEFAULT PRIVILEGES IN SCHEMA {{ item }} GRANT SELECT ON TABLES TO group dbbackupusers;"
  become: true
  become_user: postgres
  loop:
    - hdb_catalog
