  - block: 

    - name: assert ansible version
      fail:
        msg: Ansible 2.8 or above is required
      when: ansible_version.full is version('2.8', '<')

    - name: update operating system package cache .deb based
      apt:
        update_cache: true
      when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian"

    - name: check for existing upgradable packages
      command: apt list --upgradable
      register: upgradable_packages
      when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian"

    - block:
      - debug:
          msg: "current number of upgradable packages: {{ upgradable_packages.stdout_lines|length-1 }}"

      - name: assert there are no upgradable packages. upgrades must be run interactively outside the billy installer
        fail:
          msg:
            - There are upgradable OS packages available, please run OS upgrade before running billy installer. 
            - Use "-e force_install=true" to overwrite this check and install anyway at your own risk.
        when: |
          (ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian")
          and upgradable_packages.stdout_lines|length > 1

      when: not force_install|bool and not run_on_github|bool

    - name: update operating system packages .deb based (for github actions or enforced run)
      apt:
        upgrade: dist
        update_cache: true
      when: ansible_facts['distribution'] == "Ubuntu" or ansible_facts['distribution'] == "Debian" and run_on_github|bool

    - name: update operating system packages .rpm based (untested)
      yum:
        upgrade: dist
      when: ansible_facts['distribution'] == "Red Hat" or ansible_facts['distribution'] == "CentOS"

    - name: install packages rsync, acl (for non-root user in ansible)
      package:
        name: "{{ item }}"
        state: present
      loop:
        - rsync
        - acl

    - name: check for existing main config file {{ billy_conf_file }}
      stat:
        path: "{{ billy_conf_file }}"
      register: already_installed

    - set_fact:
        already_installed: "{{ already_installed.stat.exists }}"
    
    - debug:
        msg: "installation_mode={{ installation_mode }}, already_installed={{ already_installed }}"
    
    - name: fail if unknown installation_mode is set
      fail:
        msg: "Found undefined installation_mode: {{ installation_mode }}, aborting."
      when: installation_mode != "new" and installation_mode != "uninstall" and installation_mode != "upgrade"

    - name: fail if already installed and installation_mode is new
      fail:
        msg: "Found existing installation but running with installation_mode set to {{ installation_mode }}. If you want to upgrade, use 'installation_mode=upgrade'."
      when: already_installed|bool and installation_mode == "new"

    - name: fail if not already installed and installation_mode is upgrade
      fail:
        msg: "Could not find existing installation but running with installation_mode set to {{ installation_mode }}. Try running with installation_mode=new"
      when: not already_installed and installation_mode == "upgrade"

    - name: create group {{ billy_group }}
      group:
        name: "{{ billy_user }}"
        gid: "{{ user_id }}"
        state: present
      
    - name: add user {{ billy_user }}
      user:
        name: "{{ billy_user }}"
        comment: "{{ product_name }} User"
        uid: "{{ user_id }}"
        home: "{{ billy_home }}"
        shell: /bin/bash
        group: "{{ billy_group }}"
        generate_ssh_key: true
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa

    - name: create var lock directory
      file:
        path: "{{ billy_log_lock_dir }}"
        state: directory
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        mode: "0775"

    - name: create scripts directory
      file:
        path: "{{ billy_home }}/scripts"
        state: directory
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        mode: "0775"

    - name: copy log lock scripts
      copy:
        src: "{{ item }}"
        dest: "{{ billy_home }}/scripts/"
        mode: "0755"
        owner: "{{ billy_user}}"
        group: "{{ billy_user}}"
      loop:
        - acquire_lock.py
        - release_lock.py

    - name: install rsyslog
      import_tasks: install_syslog.yml
      when: "install_syslog | bool"

    - name: create base {{ billy_home }} directory
      file:
        path: "{{ billy_home }}"
        state: directory
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        mode: "0775"

    - name: add proxy setting to billy users .profile and .bashrc
      blockinfile:
        path: "{{ billy_home }}/{{ item }}"
        create: true
        mode: "0644"
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        block: |
          http_proxy={{ http_proxy }}
          https_proxy={{ http_proxy }}
      loop:
        - .bashrc
        - .profile

    - name: create etc dir
      file:
        path: "{{ billy_home }}/etc"
        state: directory
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        mode: '0755'

    - name: create dir for passwords
      file:
        path: "{{ billy_home }}/etc/secrets"
        state: directory
        owner: "{{ billy_user }}"
        group: "{{ billy_group }}"
        mode: '0700'

    - set_fact:
        wsgi_package_name: "{{ wsgi_package_name }}-py3"
      when: | 
        (ansible_facts['distribution_release']|lower == debian_testing_release_name)
        or 
        (ansible_facts['distribution']|lower == 'debian' and ansible_facts['distribution_major_version']|int is version('10', '>'))
        or 
        (ansible_facts['distribution']|lower == 'ubuntu' and ansible_facts['distribution_major_version']|int is version('20', '>'))

    - name: include billy.yaml config file creator
      import_tasks: conf_file_creator.yml

    - name: include upgrade script
      import_tasks: run-upgrades.yml
      when: "installation_mode == 'upgrade'"

    become: true
    